//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg
{

public sealed partial class UnitInfoCfg :  Bright.Config.BeanBase 
{
    public UnitInfoCfg(ByteBuf _buf) 
    {
        unitId = _buf.ReadInt();
        unitName = _buf.ReadString();
        resName = _buf.ReadString();
        hp = _buf.ReadInt();
        def = _buf.ReadInt();
        moveSpeed = _buf.ReadInt();
        colliderType = (UnitTypeEnum)_buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);pasvBuff = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); pasvBuff[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);skillArr = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); skillArr[i] = _e;}}
        PostInit();
    }

    public static UnitInfoCfg DeserializeUnitInfoCfg(ByteBuf _buf)
    {
        return new UnitInfoCfg(_buf);
    }

    public int unitId { get; private set; }
    /// <summary>
    /// 单位角色名
    /// </summary>
    public string unitName { get; private set; }
    /// <summary>
    /// 资源
    /// </summary>
    public string resName { get; private set; }
    public int hp { get; private set; }
    public int def { get; private set; }
    public int moveSpeed { get; private set; }
    /// <summary>
    /// 碰撞体类型
    /// </summary>
    public UnitTypeEnum colliderType { get; private set; }
    /// <summary>
    /// 被动技能buff
    /// </summary>
    public int[] pasvBuff { get; private set; }
    public int[] skillArr { get; private set; }
    public SkillCfg[] skillArr_Ref { get; private set; }

    public const int __ID__ = 549758610;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        { int __n = skillArr.Length; Datas.TbSkillCfg __table = (Datas.TbSkillCfg)_tables["Datas.TbSkillCfg"]; this.skillArr_Ref = new SkillCfg[__n]; for(int i = 0 ; i < __n ; i++) { this.skillArr_Ref[i] =  __table.GetOrDefault(skillArr[i]); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "unitId:" + unitId + ","
        + "unitName:" + unitName + ","
        + "resName:" + resName + ","
        + "hp:" + hp + ","
        + "def:" + def + ","
        + "moveSpeed:" + moveSpeed + ","
        + "colliderType:" + colliderType + ","
        + "pasvBuff:" + Bright.Common.StringUtil.CollectionToString(pasvBuff) + ","
        + "skillArr:" + Bright.Common.StringUtil.CollectionToString(skillArr) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
