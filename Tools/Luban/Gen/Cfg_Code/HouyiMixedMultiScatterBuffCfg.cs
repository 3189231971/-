//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg
{

public sealed partial class HouyiMixedMultiScatterBuffCfg :  BuffCfg 
{
    public HouyiMixedMultiScatterBuffCfg(ByteBuf _buf)  : base(_buf) 
    {
        scatterCount = _buf.ReadInt();
        targetCfg = TargetCfg.DeserializeTargetCfg(_buf);
        damagePct = _buf.ReadInt();
        arrowCount = _buf.ReadInt();
        arrowDelay = _buf.ReadInt();
        posOffset = _buf.ReadFloat();
        PostInit();
    }

    public static HouyiMixedMultiScatterBuffCfg DeserializeHouyiMixedMultiScatterBuffCfg(ByteBuf _buf)
    {
        return new HouyiMixedMultiScatterBuffCfg(_buf);
    }

    /// <summary>
    /// 散射个数
    /// </summary>
    public int scatterCount { get; private set; }
    /// <summary>
    /// 散射目标查找规则
    /// </summary>
    public TargetCfg targetCfg { get; private set; }
    /// <summary>
    /// 散射子弹伤害百分比
    /// </summary>
    public int damagePct { get; private set; }
    public int arrowCount { get; private set; }
    public int arrowDelay { get; private set; }
    public float posOffset { get; private set; }

    public const int __ID__ = -1739847185;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        targetCfg?.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        targetCfg?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "buffId:" + buffId + ","
        + "buffName:" + buffName + ","
        + "buffType:" + buffType + ","
        + "attacher:" + attacher + ","
        + "staticPosType:" + staticPosType + ","
        + "impacter:" + impacter + ","
        + "buffDelay:" + buffDelay + ","
        + "buffInterval:" + buffInterval + ","
        + "buffDuration:" + buffDuration + ","
        + "buffAudio:" + buffAudio + ","
        + "buffEffect:" + buffEffect + ","
        + "hitTickAudio:" + hitTickAudio + ","
        + "scatterCount:" + scatterCount + ","
        + "targetCfg:" + targetCfg + ","
        + "damagePct:" + damagePct + ","
        + "arrowCount:" + arrowCount + ","
        + "arrowDelay:" + arrowDelay + ","
        + "posOffset:" + posOffset + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
