//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg
{

public sealed partial class JinxRocketMixedBuffCfg_DynamicGroup :  BuffCfg 
{
    public JinxRocketMixedBuffCfg_DynamicGroup()
    {
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
        { 
            var _fieldJson = _json["minTime"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  minTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["maxTime"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  maxTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["minDamage"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  minDamage = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["maxDamage"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  maxDamage = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["perDamagedHit"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  perDamagedHit = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["perSplash"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  perSplash = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
        {
            _json["minTime"] = new JSONNumber(minTime);
        }
        {
            _json["maxTime"] = new JSONNumber(maxTime);
        }
        {
            _json["minDamage"] = new JSONNumber(minDamage);
        }
        {
            _json["maxDamage"] = new JSONNumber(maxDamage);
        }
        {
            _json["perDamagedHit"] = new JSONNumber(perDamagedHit);
        }
        {
            _json["perSplash"] = new JSONNumber(perSplash);
        }
    }

    public static JinxRocketMixedBuffCfg_DynamicGroup LoadJsonJinxRocketMixedBuffCfg_DynamicGroup(SimpleJSON.JSONNode _json)
    {
        JinxRocketMixedBuffCfg_DynamicGroup obj = new JinxRocketMixedBuffCfg_DynamicGroup();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonJinxRocketMixedBuffCfg_DynamicGroup(JinxRocketMixedBuffCfg_DynamicGroup _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int minTime { get; set; }

    public int maxTime { get; set; }

    public int minDamage { get; set; }

    public int maxDamage { get; set; }

    /// <summary>
    /// 造成敌人已损失血量百分比伤害
    /// </summary>
    public int perDamagedHit { get; set; }

    /// <summary>
    /// 溅射百分比
    /// </summary>
    public int perSplash { get; set; }

}
}
