//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg
{

public sealed partial class SkillCfg :  Bright.Config.BeanBase 
{
    public SkillCfg(ByteBuf _buf) 
    {
        skillId = _buf.ReadInt();
        iconName = _buf.ReadString();
        aniName = _buf.ReadString();
        audio_start = _buf.ReadString();
        audio_work = _buf.ReadString();
        audio_hit = _buf.ReadString();
        cdTime = _buf.ReadInt();
        spellTime = _buf.ReadInt();
        skillTime = _buf.ReadInt();
        damage = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);buffIdArr = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); buffIdArr[i] = _e;}}
        isNormalAttack = _buf.ReadBool();
        releaseMode = (ReleaseModeEnum)_buf.ReadInt();
        if(_buf.ReadBool()){ targetCfg = TargetCfg.DeserializeTargetCfg(_buf); } else { targetCfg = null; }
        if(_buf.ReadBool()){ bulletCfg = BulletCfg.DeserializeBulletCfg(_buf); } else { bulletCfg = null; }
        PostInit();
    }

    public static SkillCfg DeserializeSkillCfg(ByteBuf _buf)
    {
        return new SkillCfg(_buf);
    }

    public int skillId { get; private set; }
    /// <summary>
    /// 技能图标
    /// </summary>
    public string iconName { get; private set; }
    /// <summary>
    /// 施法动画
    /// </summary>
    public string aniName { get; private set; }
    /// <summary>
    /// 施法开始音效
    /// </summary>
    public string audio_start { get; private set; }
    /// <summary>
    /// 施法成功音效
    /// </summary>
    public string audio_work { get; private set; }
    /// <summary>
    /// 施法命中音效
    /// </summary>
    public string audio_hit { get; private set; }
    /// <summary>
    /// CD时间 ms
    /// </summary>
    public int cdTime { get; private set; }
    /// <summary>
    /// 施法时间(前摇) ms
    /// </summary>
    public int spellTime { get; private set; }
    /// <summary>
    /// 技能全长时间(前摇+后摇) ms,后摇动作均可被移动中断，但技能总时间不能变短
    /// </summary>
    public int skillTime { get; private set; }
    /// <summary>
    /// 基础伤害数值
    /// </summary>
    public int damage { get; private set; }
    /// <summary>
    /// 附加Buff
    /// </summary>
    public int[] buffIdArr { get; private set; }
    /// <summary>
    /// 是否为普通攻击
    /// </summary>
    public bool isNormalAttack { get; private set; }
    /// <summary>
    /// 释放方式
    /// </summary>
    public ReleaseModeEnum releaseMode { get; private set; }
    /// <summary>
    /// 目标选择配置,null为非锁定弹道技能
    /// </summary>
    public TargetCfg targetCfg { get; private set; }
    /// <summary>
    /// 弹道配置，无弹道就为null
    /// </summary>
    public BulletCfg bulletCfg { get; private set; }

    public const int __ID__ = -2087897997;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        targetCfg?.Resolve(_tables);
        bulletCfg?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        targetCfg?.TranslateText(translator);
        bulletCfg?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "skillId:" + skillId + ","
        + "iconName:" + iconName + ","
        + "aniName:" + aniName + ","
        + "audio_start:" + audio_start + ","
        + "audio_work:" + audio_work + ","
        + "audio_hit:" + audio_hit + ","
        + "cdTime:" + cdTime + ","
        + "spellTime:" + spellTime + ","
        + "skillTime:" + skillTime + ","
        + "damage:" + damage + ","
        + "buffIdArr:" + Bright.Common.StringUtil.CollectionToString(buffIdArr) + ","
        + "isNormalAttack:" + isNormalAttack + ","
        + "releaseMode:" + releaseMode + ","
        + "targetCfg:" + targetCfg + ","
        + "bulletCfg:" + bulletCfg + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
