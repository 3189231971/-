//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg
{

public sealed partial class JinxRocketMixedBuffCfg_DynamicGroup :  BuffCfg 
{
    public JinxRocketMixedBuffCfg_DynamicGroup(ByteBuf _buf)  : base(_buf) 
    {
        minTime = _buf.ReadInt();
        maxTime = _buf.ReadInt();
        minDamage = _buf.ReadInt();
        maxDamage = _buf.ReadInt();
        perDamagedHit = _buf.ReadInt();
        perSplash = _buf.ReadInt();
        PostInit();
    }

    public static JinxRocketMixedBuffCfg_DynamicGroup DeserializeJinxRocketMixedBuffCfg_DynamicGroup(ByteBuf _buf)
    {
        return new JinxRocketMixedBuffCfg_DynamicGroup(_buf);
    }

    public int minTime { get; private set; }
    public int maxTime { get; private set; }
    public int minDamage { get; private set; }
    public int maxDamage { get; private set; }
    /// <summary>
    /// 造成敌人已损失血量百分比伤害
    /// </summary>
    public int perDamagedHit { get; private set; }
    /// <summary>
    /// 溅射百分比
    /// </summary>
    public int perSplash { get; private set; }

    public const int __ID__ = 1041282956;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "buffId:" + buffId + ","
        + "buffName:" + buffName + ","
        + "buffType:" + buffType + ","
        + "attacher:" + attacher + ","
        + "staticPosType:" + staticPosType + ","
        + "impacter:" + impacter + ","
        + "buffDelay:" + buffDelay + ","
        + "buffInterval:" + buffInterval + ","
        + "buffDuration:" + buffDuration + ","
        + "buffAudio:" + buffAudio + ","
        + "buffEffect:" + buffEffect + ","
        + "hitTickAudio:" + hitTickAudio + ","
        + "effectDestoryExtend:" + effectDestoryExtend + ","
        + "minTime:" + minTime + ","
        + "maxTime:" + maxTime + ","
        + "minDamage:" + minDamage + ","
        + "maxDamage:" + maxDamage + ","
        + "perDamagedHit:" + perDamagedHit + ","
        + "perSplash:" + perSplash + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
