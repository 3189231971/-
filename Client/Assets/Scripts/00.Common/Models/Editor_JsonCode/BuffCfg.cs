//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Sirenix.OdinInspector;
using UnityEngine.UI;


namespace editor.cfg
{
    
[Serializable]
public sealed partial class BuffCfg :  Bright.Config.EditorBeanBase 
{
    public BuffCfg()
    {
            buffName = "";
            buffType = "None";
            attacher = "None";
            staticPosType = "None";
            impacter = new TargetCfg();
            buffAudio = "";
            buffEffect = "";
            hitTickAudio = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["buffId"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  buffId = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffName"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  buffName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffType"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  buffType = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["attacher"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  attacher = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["staticPosType"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  staticPosType = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["impacter"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  impacter = TargetCfg.LoadJsonTargetCfg(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["buffDelay"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  buffDelay = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffInterval"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  buffInterval = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffDuration"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  buffDuration = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffAudio"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  buffAudio = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffEffect"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  buffEffect = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["hitTickAudio"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  hitTickAudio = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {
            _json["buffId"] = new JSONNumber(buffId);
        }
        {

            if (buffName == null) { throw new System.ArgumentNullException(); }
            _json["buffName"] = new JSONString(buffName);
        }
        {
            _json["buffType"] = new JSONString(buffType);
        }
        {
            _json["attacher"] = new JSONString(attacher);
        }
        {
            _json["staticPosType"] = new JSONString(staticPosType);
        }
        {

            if (impacter == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  TargetCfg.SaveJsonTargetCfg(impacter, __bjson); _json["impacter"] = __bjson; }
        }
        {
            _json["buffDelay"] = new JSONNumber(buffDelay);
        }
        {
            _json["buffInterval"] = new JSONNumber(buffInterval);
        }
        {
            _json["buffDuration"] = new JSONNumber(buffDuration);
        }
        {

            if (buffAudio == null) { throw new System.ArgumentNullException(); }
            _json["buffAudio"] = new JSONString(buffAudio);
        }
        {

            if (buffEffect == null) { throw new System.ArgumentNullException(); }
            _json["buffEffect"] = new JSONString(buffEffect);
        }
        {

            if (hitTickAudio == null) { throw new System.ArgumentNullException(); }
            _json["hitTickAudio"] = new JSONString(hitTickAudio);
        }
    }

    public static BuffCfg LoadJsonBuffCfg(SimpleJSON.JSONNode _json)
    {
        BuffCfg obj = new BuffCfg();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonBuffCfg(BuffCfg _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    
    [ShowInInspector]public int buffId { get; set; }
    
    [ShowInInspector]public string buffName { get; set; }

    /// <summary>
    /// buff类型，用来创建不同类型的buff
    /// </summary>
    [ShowInInspector]public string buffType { get; set; }

    /// <summary>
    /// buff附着目标
    /// </summary>
    [ShowInInspector]public string attacher { get; set; }

    [ShowInInspector]public string staticPosType { get; set; }

    /// <summary>
    /// buff作用目标，如果为null默认影响附着对象
    /// </summary>
    [ShowInInspector]public TargetCfg impacter { get; set; }

    [ShowInInspector]public int buffDelay { get; set; }

    /// <summary>
    /// buff效果触发频率(比如持续1秒1次)，如果为0就只调用Start，LogicTick不会调用到Tick
    /// </summary>
    [ShowInInspector]public int buffInterval { get; set; }

    /// <summary>
    /// buff持续时间（不包含delay）0：生效1次，-1：永久生效
    /// </summary>
    [ShowInInspector]public int buffDuration { get; set; }

    [ShowInInspector]public string buffAudio { get; set; }

    [ShowInInspector]public string buffEffect { get; set; }

    [ShowInInspector]public string hitTickAudio { get; set; }

}
}
