//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg
{
[Serializable]
public sealed partial class SkillCfg :  Bright.Config.EditorBeanBase 
{
    public SkillCfg()
    {
            iconName = "";
            aniName = "";
            audio_start = "";
            audio_work = "";
            audio_hit = "";
            buffIdArr = System.Array.Empty<int>();
            releaseMode = "None";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["skillId"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  skillId = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["iconName"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  iconName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["aniName"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  aniName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["audio_start"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  audio_start = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["audio_work"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  audio_work = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["audio_hit"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  audio_hit = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["cdTime"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  cdTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["spellTime"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  spellTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["skillTime"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  skillTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["damage"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  damage = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["buffIdArr"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n = _fieldJson.Count; buffIdArr = new int[_n]; int _index=0; foreach(SimpleJSON.JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  buffIdArr[_index++] = __v; }  
            }
        }
        
        { 
            var _fieldJson = _json["isNormalAttack"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  isNormalAttack = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["releaseMode"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  releaseMode = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["targetCfg"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  targetCfg = TargetCfg.LoadJsonTargetCfg(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["bulletCfg"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  bulletCfg = BulletCfg.LoadJsonBulletCfg(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {
            _json["skillId"] = new JSONNumber(skillId);
        }
        {

            if (iconName == null) { throw new System.ArgumentNullException(); }
            _json["iconName"] = new JSONString(iconName);
        }
        {

            if (aniName == null) { throw new System.ArgumentNullException(); }
            _json["aniName"] = new JSONString(aniName);
        }
        {

            if (audio_start == null) { throw new System.ArgumentNullException(); }
            _json["audio_start"] = new JSONString(audio_start);
        }
        {

            if (audio_work == null) { throw new System.ArgumentNullException(); }
            _json["audio_work"] = new JSONString(audio_work);
        }
        {

            if (audio_hit == null) { throw new System.ArgumentNullException(); }
            _json["audio_hit"] = new JSONString(audio_hit);
        }
        {
            _json["cdTime"] = new JSONNumber(cdTime);
        }
        {
            _json["spellTime"] = new JSONNumber(spellTime);
        }
        {
            _json["skillTime"] = new JSONNumber(skillTime);
        }
        {
            _json["damage"] = new JSONNumber(damage);
        }
        {

            if (buffIdArr == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in buffIdArr) { __cjson["null"] = new JSONNumber(_e); } _json["buffIdArr"] = __cjson; }
        }
        {
            _json["isNormalAttack"] = new JSONBool(isNormalAttack);
        }
        {
            _json["releaseMode"] = new JSONString(releaseMode);
        }

        if (targetCfg != null)
        {
            { var __bjson = new JSONObject();  TargetCfg.SaveJsonTargetCfg(targetCfg, __bjson); _json["targetCfg"] = __bjson; }
        }

        if (bulletCfg != null)
        {
            { var __bjson = new JSONObject();  BulletCfg.SaveJsonBulletCfg(bulletCfg, __bjson); _json["bulletCfg"] = __bjson; }
        }
    }

    public static SkillCfg LoadJsonSkillCfg(SimpleJSON.JSONNode _json)
    {
        SkillCfg obj = new SkillCfg();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonSkillCfg(SkillCfg _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int skillId { get; set; }

    /// <summary>
    /// 技能图标
    /// </summary>
    public string iconName { get; set; }

    /// <summary>
    /// 施法动画
    /// </summary>
    public string aniName { get; set; }

    /// <summary>
    /// 施法开始音效
    /// </summary>
    public string audio_start { get; set; }

    /// <summary>
    /// 施法成功音效
    /// </summary>
    public string audio_work { get; set; }

    /// <summary>
    /// 施法命中音效
    /// </summary>
    public string audio_hit { get; set; }

    /// <summary>
    /// CD时间 ms
    /// </summary>
    public int cdTime { get; set; }

    /// <summary>
    /// 施法时间(前摇) ms
    /// </summary>
    public int spellTime { get; set; }

    /// <summary>
    /// 技能全长时间(前摇+后摇) ms,后摇动作均可被移动中断，但技能总时间不能变短
    /// </summary>
    public int skillTime { get; set; }

    /// <summary>
    /// 基础伤害数值
    /// </summary>
    public int damage { get; set; }

    /// <summary>
    /// 附加Buff
    /// </summary>
    public int[] buffIdArr { get; set; }

    /// <summary>
    /// 是否为普通攻击
    /// </summary>
    public bool isNormalAttack { get; set; }

    /// <summary>
    /// 释放方式
    /// </summary>
    public string releaseMode { get; set; }

    /// <summary>
    /// 目标选择配置,null为非锁定弹道技能
    /// </summary>
    public TargetCfg targetCfg { get; set; }

    /// <summary>
    /// 弹道配置，无弹道就为null
    /// </summary>
    public BulletCfg bulletCfg { get; set; }

}
}
