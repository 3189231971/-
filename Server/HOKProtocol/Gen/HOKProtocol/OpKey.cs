//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;

namespace proto.HOKProtocol
{

    public  sealed class OpKey :  Bright.Serialization.BeanBase 
    {
        public OpKey()
        {
        }

        public OpKey(Bright.Common.NotNullInitialization _) 
        {
            moveKey = new HOKProtocol.MoveKey();
            skillKey = new HOKProtocol.SkillKey();
        }

        public static void SerializeOpKey(ByteBuf _buf, OpKey x)
        {
            x.Serialize(_buf);
        }

        public static OpKey DeserializeOpKey(ByteBuf _buf)
        {
            var x = new HOKProtocol.OpKey();
            x.Deserialize(_buf);
            return x;
        }

         public int opIndex;

         public HOKProtocol.KeyType keyType;

         public HOKProtocol.MoveKey moveKey;

         public HOKProtocol.SkillKey skillKey;


        public const int __ID__ = 0;
        public override int GetTypeId() => __ID__;

        public override void Serialize(ByteBuf _buf)
        {
            _buf.WriteInt(opIndex);
            _buf.WriteInt((int)keyType);
            { if(moveKey is HOKProtocol.MoveKey __value__){ _buf.WriteBool(true); HOKProtocol.MoveKey.SerializeMoveKey(_buf, __value__); } else { _buf.WriteBool(false); } }
            { if(skillKey is HOKProtocol.SkillKey __value__){ _buf.WriteBool(true); HOKProtocol.SkillKey.SerializeSkillKey(_buf, __value__); } else { _buf.WriteBool(false); } }
        }

        public override void Deserialize(ByteBuf _buf)
        {
            opIndex = _buf.ReadInt();
            keyType = (HOKProtocol.KeyType)_buf.ReadInt();
            if(_buf.ReadBool()){ moveKey = HOKProtocol.MoveKey.DeserializeMoveKey(_buf); } else { moveKey = null; }
            if(_buf.ReadBool()){ skillKey = HOKProtocol.SkillKey.DeserializeSkillKey(_buf); } else { skillKey = null; }
        }

        public override string ToString()
        {
            return "HOKProtocol.OpKey{ "
            + "opIndex:" + opIndex + ","
            + "keyType:" + keyType + ","
            + "moveKey:" + moveKey + ","
            + "skillKey:" + skillKey + ","
            + "}";
        }
    }

}
